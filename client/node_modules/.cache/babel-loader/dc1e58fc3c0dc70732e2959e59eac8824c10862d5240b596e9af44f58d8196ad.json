{"ast":null,"code":"import _objectSpread from\"/home/runner/work/taylors-react-portfolio/taylors-react-portfolio/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import PortfolioContainer from'./components/PortfolioContainer';import React from\"react\";import{ApolloProvider,ApolloClient,InMemoryCache,createHttpLink}from\"@apollo/client\";import{setContext}from\"@apollo/client/link/context\";import{jsx as _jsx}from\"react/jsx-runtime\";var httpLink=createHttpLink({uri:\"/graphql\"});// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nvar authLink=setContext(function(_,_ref){var headers=_ref.headers;// return the headers to the context so httpLink can read them\nreturn{headers:_objectSpread({},headers)};});var client=new ApolloClient({// Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\nlink:authLink.concat(httpLink),cache:new InMemoryCache()});function App(){return/*#__PURE__*/_jsx(ApolloProvider,{client:client,children:/*#__PURE__*/_jsx(PortfolioContainer,{})});}export default App;","map":{"version":3,"names":["PortfolioContainer","React","ApolloProvider","ApolloClient","InMemoryCache","createHttpLink","setContext","jsx","_jsx","httpLink","uri","authLink","_","_ref","headers","_objectSpread","client","link","concat","cache","App","children"],"sources":["/home/runner/work/taylors-react-portfolio/taylors-react-portfolio/client/src/App.js"],"sourcesContent":["import PortfolioContainer from './components/PortfolioContainer';\nimport React from \"react\";\nimport {\n  ApolloProvider,\n  ApolloClient,\n  InMemoryCache,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// Construct request middleware that will attach the JWT token to every request as an `authorization` header\nconst authLink = setContext((_, { headers }) => {\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  // Set up our client to execute the `authLink` middleware prior to making the request to our GraphQL API\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App () {\n  return (\n    <ApolloProvider client={client}>\n       <PortfolioContainer/>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n"],"mappings":"6JAAA,MAAO,CAAAA,kBAAkB,KAAM,iCAAiC,CAChE,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OACEC,cAAc,CACdC,YAAY,CACZC,aAAa,CACbC,cAAc,KACT,gBAAgB,CACvB,OAASC,UAAU,KAAQ,6BAA6B,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAGzD,GAAM,CAAAC,QAAQ,CAAGJ,cAAc,CAAC,CAC9BK,GAAG,CAAE,UACP,CAAC,CAAC,CAEF;AACA,GAAM,CAAAC,QAAQ,CAAGL,UAAU,CAAC,SAACM,CAAC,CAAAC,IAAA,CAAkB,IAAd,CAAAC,OAAO,CAAAD,IAAA,CAAPC,OAAO,CAEvC;AACA,MAAO,CACLA,OAAO,CAAAC,aAAA,IACFD,OAAO,CAEd,CAAC,CACH,CAAC,CAAC,CAEF,GAAM,CAAAE,MAAM,CAAG,GAAI,CAAAb,YAAY,CAAC,CAC9B;AACAc,IAAI,CAAEN,QAAQ,CAACO,MAAM,CAACT,QAAQ,CAAC,CAC/BU,KAAK,CAAE,GAAI,CAAAf,aAAa,EAC1B,CAAC,CAAC,CAEF,QAAS,CAAAgB,GAAGA,CAAA,CAAI,CACd,mBACEZ,IAAA,CAACN,cAAc,EAACc,MAAM,CAAEA,MAAO,CAAAK,QAAA,cAC5Bb,IAAA,CAACR,kBAAkB,IAAE,EACP,CAErB,CAEA,cAAe,CAAAoB,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}